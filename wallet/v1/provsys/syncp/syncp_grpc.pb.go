//
// Provider System gRPC Services
//
// Sync Credit Provider related messages.
// This proto contains everything related to synchronize credit provider services
// accepted payload, returned response and method.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: v1/provsys/syncp.proto

package syncp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Syncp_Credit_FullMethodName = "/wallet.v1.provsys.Syncp/Credit"
)

// SyncpClient is the client API for Syncp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for handling syncing member's credit that called by provider.
type SyncpClient interface {
	// Used to getting member credit.
	Credit(ctx context.Context, in *SyncCredit_Req, opts ...grpc.CallOption) (*SyncCredit_Res, error)
}

type syncpClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncpClient(cc grpc.ClientConnInterface) SyncpClient {
	return &syncpClient{cc}
}

func (c *syncpClient) Credit(ctx context.Context, in *SyncCredit_Req, opts ...grpc.CallOption) (*SyncCredit_Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncCredit_Res)
	err := c.cc.Invoke(ctx, Syncp_Credit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncpServer is the server API for Syncp service.
// All implementations must embed UnimplementedSyncpServer
// for forward compatibility.
//
// Service for handling syncing member's credit that called by provider.
type SyncpServer interface {
	// Used to getting member credit.
	Credit(context.Context, *SyncCredit_Req) (*SyncCredit_Res, error)
	mustEmbedUnimplementedSyncpServer()
}

// UnimplementedSyncpServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyncpServer struct{}

func (UnimplementedSyncpServer) Credit(context.Context, *SyncCredit_Req) (*SyncCredit_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credit not implemented")
}
func (UnimplementedSyncpServer) mustEmbedUnimplementedSyncpServer() {}
func (UnimplementedSyncpServer) testEmbeddedByValue()               {}

// UnsafeSyncpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncpServer will
// result in compilation errors.
type UnsafeSyncpServer interface {
	mustEmbedUnimplementedSyncpServer()
}

func RegisterSyncpServer(s grpc.ServiceRegistrar, srv SyncpServer) {
	// If the following call pancis, it indicates UnimplementedSyncpServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Syncp_ServiceDesc, srv)
}

func _Syncp_Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCredit_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncpServer).Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Syncp_Credit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncpServer).Credit(ctx, req.(*SyncCredit_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Syncp_ServiceDesc is the grpc.ServiceDesc for Syncp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Syncp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.v1.provsys.Syncp",
	HandlerType: (*SyncpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Credit",
			Handler:    _Syncp_Credit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/provsys/syncp.proto",
}
